
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/tensorclass_fashion.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_tensorclass_fashion.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_tensorclass_fashion.py:


Using tensorclasses for datasets
================================

.. GENERATED FROM PYTHON SOURCE LINES 9-15

In this tutorial we demonstrate how tensorclasses can be used to
efficiently and transparently load and manage data inside a training
pipeline. The tutorial is based heavily on the `PyTorch Quickstart
Tutorial <https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html>`__,
but modified to demonstrate use of tensorclass. See the related tutorial using
``TensorDict``.

.. GENERATED FROM PYTHON SOURCE LINES 15-30

.. code-block:: Python



    import torch
    import torch.nn as nn

    from tensordict import MemoryMappedTensor
    from tensordict.prototype import tensorclass
    from torch.utils.data import DataLoader
    from torchvision import datasets
    from torchvision.transforms import ToTensor

    device = "cuda" if torch.cuda.is_available() else "cpu"
    print(f"Using device: {device}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using device: cpu




.. GENERATED FROM PYTHON SOURCE LINES 31-35

The ``torchvision.datasets`` module contains a number of convenient pre-prepared
datasets. In this tutorial we'll use the relatively simple FashionMNIST dataset. Each
image is an item of clothing, the objective is to classify the type of clothing in
the image (e.g. "Bag", "Sneaker" etc.).

.. GENERATED FROM PYTHON SOURCE LINES 35-49

.. code-block:: Python


    training_data = datasets.FashionMNIST(
        root="data",
        train=True,
        download=True,
        transform=ToTensor(),
    )
    test_data = datasets.FashionMNIST(
        root="data",
        train=False,
        download=True,
        transform=ToTensor(),
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz
      0%|          | 0/26421880 [00:00<?, ?it/s]      0%|          | 65536/26421880 [00:00<01:12, 363519.62it/s]      1%|          | 229376/26421880 [00:00<00:38, 684814.56it/s]      4%|▎         | 950272/26421880 [00:00<00:11, 2196389.94it/s]     15%|█▍        | 3833856/26421880 [00:00<00:02, 7634068.41it/s]     38%|███▊      | 10092544/26421880 [00:00<00:00, 17351495.22it/s]     59%|█████▉    | 15597568/26421880 [00:01<00:00, 21820745.40it/s]     81%|████████▏ | 21495808/26421880 [00:01<00:00, 29693363.23it/s]     94%|█████████▍| 24903680/26421880 [00:01<00:00, 26321862.72it/s]    100%|██████████| 26421880/26421880 [00:01<00:00, 19420418.90it/s]
    Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz
      0%|          | 0/29515 [00:00<?, ?it/s]    100%|██████████| 29515/29515 [00:00<00:00, 325593.50it/s]
    Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz
      0%|          | 0/4422102 [00:00<?, ?it/s]      1%|▏         | 65536/4422102 [00:00<00:12, 359617.91it/s]      5%|▌         | 229376/4422102 [00:00<00:06, 677365.19it/s]     19%|█▊        | 819200/4422102 [00:00<00:01, 2323410.40it/s]     41%|████      | 1802240/4422102 [00:00<00:00, 3791561.42it/s]    100%|██████████| 4422102/4422102 [00:00<00:00, 6053517.98it/s]
    Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz
      0%|          | 0/5148 [00:00<?, ?it/s]    100%|██████████| 5148/5148 [00:00<00:00, 60823315.47it/s]
    Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw





.. GENERATED FROM PYTHON SOURCE LINES 50-61

Tensorclasses are dataclasses that expose dedicated tensor methods over
its contents much like ``TensorDict``. They are a good choice when the
structure of the data you want to store is fixed and predictable.

As well as specifying the contents, we can also encapsulate related
logic as custom methods when defining the class. In this case we’ll
write a ``from_dataset`` classmethod that takes a dataset as input and
creates a tensorclass containing the data from the dataset. We create
memory-mapped tensors to hold the data. This will allow us to
efficiently load batches of transformed data from disk rather than
repeatedly load and transform individual images.

.. GENERATED FROM PYTHON SOURCE LINES 61-83

.. code-block:: Python



    @tensorclass
    class FashionMNISTData:
        images: torch.Tensor
        targets: torch.Tensor

        @classmethod
        def from_dataset(cls, dataset, device=None):
            data = cls(
                images=MemoryMappedTensor.empty(
                    (len(dataset), *dataset[0][0].squeeze().shape), dtype=torch.float32
                ),
                targets=MemoryMappedTensor.empty((len(dataset),), dtype=torch.int64),
                batch_size=[len(dataset)],
                device=device,
            )
            for i, (image, target) in enumerate(dataset):
                data[i] = cls(images=image, targets=torch.tensor(target), batch_size=[])
            return data









.. GENERATED FROM PYTHON SOURCE LINES 84-87

We will create two tensorclasses, one each for the training and test data. Note that
we incur some overhead here as we are looping over the entire dataset, transforming
and saving to disk.

.. GENERATED FROM PYTHON SOURCE LINES 87-91

.. code-block:: Python


    training_data_tc = FashionMNISTData.from_dataset(training_data, device=device)
    test_data_tc = FashionMNISTData.from_dataset(test_data, device=device)








.. GENERATED FROM PYTHON SOURCE LINES 92-103

DataLoaders
----------------

We’ll create DataLoaders from the ``torchvision``-provided Datasets, as
well as from our memory-mapped TensorDicts.

Since ``TensorDict`` implements ``__len__`` and ``__getitem__`` (and
also ``__getitems__``) we can use it like a map-style Dataset and create
a ``DataLoader`` directly from it. Note that because ``TensorDict`` can
already handle batched indices, there is no need for collation, so we
pass the identity function as ``collate_fn``.

.. GENERATED FROM PYTHON SOURCE LINES 103-116

.. code-block:: Python


    batch_size = 64

    train_dataloader = DataLoader(training_data, batch_size=batch_size)  # noqa: TOR401
    test_dataloader = DataLoader(test_data, batch_size=batch_size)  # noqa: TOR401

    train_dataloader_tc = DataLoader(  # noqa: TOR401
        training_data_tc, batch_size=batch_size, collate_fn=lambda x: x
    )
    test_dataloader_tc = DataLoader(  # noqa: TOR401
        test_data_tc, batch_size=batch_size, collate_fn=lambda x: x
    )








.. GENERATED FROM PYTHON SOURCE LINES 117-123

Model
-------

We use the same model from the
`Quickstart Tutorial <https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html>`__.


.. GENERATED FROM PYTHON SOURCE LINES 123-147

.. code-block:: Python



    class Net(nn.Module):
        def __init__(self):
            super().__init__()
            self.flatten = nn.Flatten()
            self.linear_relu_stack = nn.Sequential(
                nn.Linear(28 * 28, 512),
                nn.ReLU(),
                nn.Linear(512, 512),
                nn.ReLU(),
                nn.Linear(512, 10),
            )

        def forward(self, x):
            x = self.flatten(x)
            logits = self.linear_relu_stack(x)
            return logits


    model = Net().to(device)
    model_tc = Net().to(device)
    model, model_tc





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (Net(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (linear_relu_stack): Sequential(
        (0): Linear(in_features=784, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=10, bias=True)
      )
    ), Net(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (linear_relu_stack): Sequential(
        (0): Linear(in_features=784, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=10, bias=True)
      )
    ))



.. GENERATED FROM PYTHON SOURCE LINES 148-154

Optimizing the parameters
---------------------------------

We'll optimise the parameters of the model using stochastic gradient descent and
cross-entropy loss.


.. GENERATED FROM PYTHON SOURCE LINES 154-179

.. code-block:: Python


    loss_fn = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)
    optimizer_tc = torch.optim.SGD(model_tc.parameters(), lr=1e-3)


    def train(dataloader, model, loss_fn, optimizer):
        size = len(dataloader.dataset)
        model.train()

        for batch, (X, y) in enumerate(dataloader):
            X, y = X.to(device), y.to(device)

            pred = model(X)
            loss = loss_fn(pred, y)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            if batch % 100 == 0:
                loss, current = loss.item(), batch * len(X)
                print(f"loss: {loss:>7f} [{current:>5d}/{size:>5d}]")









.. GENERATED FROM PYTHON SOURCE LINES 180-184

The training loop for our tensorclass-based DataLoader is very similar, we just
adjust how we unpack the data to the more explicit attribute-based retrieval offered
by the tensorclass. The ``.contiguous()`` method loads the data stored in the memmap
tensor.

.. GENERATED FROM PYTHON SOURCE LINES 184-270

.. code-block:: Python



    def train_tc(dataloader, model, loss_fn, optimizer):
        size = len(dataloader.dataset)
        model.train()

        for batch, data in enumerate(dataloader):
            X, y = data.images.contiguous(), data.targets.contiguous()

            pred = model(X)
            loss = loss_fn(pred, y)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            if batch % 100 == 0:
                loss, current = loss.item(), batch * len(X)
                print(f"loss: {loss:>7f} [{current:>5d}/{size:>5d}]")


    def test(dataloader, model, loss_fn):
        size = len(dataloader.dataset)
        num_batches = len(dataloader)
        model.eval()
        test_loss, correct = 0, 0
        with torch.no_grad():
            for X, y in dataloader:
                X, y = X.to(device), y.to(device)

                pred = model(X)

                test_loss += loss_fn(pred, y).item()
                correct += (pred.argmax(1) == y).type(torch.float).sum().item()

        test_loss /= num_batches
        correct /= size

        print(
            f"Test Error: \n Accuracy: {(100 * correct):>0.1f}%, Avg loss: {test_loss:>8f} \n"
        )


    def test_tc(dataloader, model, loss_fn):
        size = len(dataloader.dataset)
        num_batches = len(dataloader)
        model.eval()
        test_loss, correct = 0, 0
        with torch.no_grad():
            for batch in dataloader:
                X, y = batch.images.contiguous(), batch.targets.contiguous()

                pred = model(X)

                test_loss += loss_fn(pred, y).item()
                correct += (pred.argmax(1) == y).type(torch.float).sum().item()

        test_loss /= num_batches
        correct /= size

        print(
            f"Test Error: \n Accuracy: {(100 * correct):>0.1f}%, Avg loss: {test_loss:>8f} \n"
        )


    for d in train_dataloader_tc:
        print(d)
        break

    import time

    t0 = time.time()
    epochs = 5
    for t in range(epochs):
        print(f"Epoch {t + 1}\n-------------------------")
        train_tc(train_dataloader_tc, model_tc, loss_fn, optimizer_tc)
        test_tc(test_dataloader_tc, model_tc, loss_fn)
    print(f"Tensorclass training done! time: {time.time() - t0: 4.4f} s")

    t0 = time.time()
    epochs = 5
    for t in range(epochs):
        print(f"Epoch {t + 1}\n-------------------------")
        train(train_dataloader, model, loss_fn, optimizer)
        test(test_dataloader, model, loss_fn)
    print(f"Training done! time: {time.time() - t0: 4.4f} s")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    FashionMNISTData(
        images=Tensor(shape=torch.Size([64, 28, 28]), device=cpu, dtype=torch.float32, is_shared=False),
        targets=Tensor(shape=torch.Size([64]), device=cpu, dtype=torch.int64, is_shared=False),
        batch_size=torch.Size([64]),
        device=cpu,
        is_shared=False)
    Epoch 1
    -------------------------
    loss: 2.308007 [    0/60000]
    loss: 2.292050 [ 6400/60000]
    loss: 2.277623 [12800/60000]
    loss: 2.267812 [19200/60000]
    loss: 2.265944 [25600/60000]
    loss: 2.228627 [32000/60000]
    loss: 2.240193 [38400/60000]
    loss: 2.203396 [44800/60000]
    loss: 2.200245 [51200/60000]
    loss: 2.173736 [57600/60000]
    Test Error: 
     Accuracy: 38.3%, Avg loss: 2.169082 

    Epoch 2
    -------------------------
    loss: 2.182118 [    0/60000]
    loss: 2.171688 [ 6400/60000]
    loss: 2.119931 [12800/60000]
    loss: 2.132348 [19200/60000]
    loss: 2.099675 [25600/60000]
    loss: 2.033683 [32000/60000]
    loss: 2.065659 [38400/60000]
    loss: 1.985576 [44800/60000]
    loss: 1.989623 [51200/60000]
    loss: 1.927749 [57600/60000]
    Test Error: 
     Accuracy: 59.6%, Avg loss: 1.924369 

    Epoch 3
    -------------------------
    loss: 1.957813 [    0/60000]
    loss: 1.928679 [ 6400/60000]
    loss: 1.818515 [12800/60000]
    loss: 1.853199 [19200/60000]
    loss: 1.751976 [25600/60000]
    loss: 1.701759 [32000/60000]
    loss: 1.724512 [38400/60000]
    loss: 1.616241 [44800/60000]
    loss: 1.641723 [51200/60000]
    loss: 1.539577 [57600/60000]
    Test Error: 
     Accuracy: 61.5%, Avg loss: 1.554767 

    Epoch 4
    -------------------------
    loss: 1.625769 [    0/60000]
    loss: 1.587376 [ 6400/60000]
    loss: 1.437494 [12800/60000]
    loss: 1.500228 [19200/60000]
    loss: 1.379356 [25600/60000]
    loss: 1.378907 [32000/60000]
    loss: 1.390077 [38400/60000]
    loss: 1.304977 [44800/60000]
    loss: 1.343742 [51200/60000]
    loss: 1.241915 [57600/60000]
    Test Error: 
     Accuracy: 63.3%, Avg loss: 1.271250 

    Epoch 5
    -------------------------
    loss: 1.355900 [    0/60000]
    loss: 1.334827 [ 6400/60000]
    loss: 1.166521 [12800/60000]
    loss: 1.262862 [19200/60000]
    loss: 1.136026 [25600/60000]
    loss: 1.164740 [32000/60000]
    loss: 1.183523 [38400/60000]
    loss: 1.113024 [44800/60000]
    loss: 1.157626 [51200/60000]
    loss: 1.071650 [57600/60000]
    Test Error: 
     Accuracy: 64.6%, Avg loss: 1.096700 

    Tensorclass training done! time:  8.9361 s
    Epoch 1
    -------------------------
    loss: 2.306533 [    0/60000]
    loss: 2.288159 [ 6400/60000]
    loss: 2.276479 [12800/60000]
    loss: 2.263980 [19200/60000]
    loss: 2.234185 [25600/60000]
    loss: 2.217720 [32000/60000]
    loss: 2.215101 [38400/60000]
    loss: 2.178218 [44800/60000]
    loss: 2.184507 [51200/60000]
    loss: 2.148154 [57600/60000]
    Test Error: 
     Accuracy: 46.7%, Avg loss: 2.141928 

    Epoch 2
    -------------------------
    loss: 2.157751 [    0/60000]
    loss: 2.141319 [ 6400/60000]
    loss: 2.091036 [12800/60000]
    loss: 2.093521 [19200/60000]
    loss: 2.036129 [25600/60000]
    loss: 1.988330 [32000/60000]
    loss: 2.002798 [38400/60000]
    loss: 1.923649 [44800/60000]
    loss: 1.935243 [51200/60000]
    loss: 1.853219 [57600/60000]
    Test Error: 
     Accuracy: 54.9%, Avg loss: 1.856025 

    Epoch 3
    -------------------------
    loss: 1.901619 [    0/60000]
    loss: 1.857857 [ 6400/60000]
    loss: 1.753003 [12800/60000]
    loss: 1.771511 [19200/60000]
    loss: 1.671342 [25600/60000]
    loss: 1.635950 [32000/60000]
    loss: 1.640970 [38400/60000]
    loss: 1.550286 [44800/60000]
    loss: 1.579816 [51200/60000]
    loss: 1.467858 [57600/60000]
    Test Error: 
     Accuracy: 61.0%, Avg loss: 1.493954 

    Epoch 4
    -------------------------
    loss: 1.570827 [    0/60000]
    loss: 1.525057 [ 6400/60000]
    loss: 1.389555 [12800/60000]
    loss: 1.439427 [19200/60000]
    loss: 1.334864 [25600/60000]
    loss: 1.336020 [32000/60000]
    loss: 1.341422 [38400/60000]
    loss: 1.270901 [44800/60000]
    loss: 1.307533 [51200/60000]
    loss: 1.206657 [57600/60000]
    Test Error: 
     Accuracy: 63.7%, Avg loss: 1.237605 

    Epoch 5
    -------------------------
    loss: 1.318657 [    0/60000]
    loss: 1.293355 [ 6400/60000]
    loss: 1.138872 [12800/60000]
    loss: 1.227311 [19200/60000]
    loss: 1.111002 [25600/60000]
    loss: 1.138163 [32000/60000]
    loss: 1.156073 [38400/60000]
    loss: 1.095469 [44800/60000]
    loss: 1.135053 [51200/60000]
    loss: 1.049754 [57600/60000]
    Test Error: 
     Accuracy: 64.9%, Avg loss: 1.077041 

    Training done! time:  34.6583 s





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 0.613 seconds)


.. _sphx_glr_download_tutorials_tensorclass_fashion.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tensorclass_fashion.ipynb <tensorclass_fashion.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tensorclass_fashion.py <tensorclass_fashion.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
