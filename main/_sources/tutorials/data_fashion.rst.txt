
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/data_fashion.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_data_fashion.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_data_fashion.py:


Using TensorDict for datasets
=============================

.. GENERATED FROM PYTHON SOURCE LINES 8-13

In this tutorial we demonstrate how ``TensorDict`` can be used to
efficiently and transparently load and manage data inside a training
pipeline. The tutorial is based heavily on the `PyTorch Quickstart
Tutorial <https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html>`__,
but modified to demonstrate use of ``TensorDict``.

.. GENERATED FROM PYTHON SOURCE LINES 13-27

.. code-block:: Python



    import torch
    import torch.nn as nn

    from tensordict import MemoryMappedTensor, TensorDict
    from torch.utils.data import DataLoader
    from torchvision import datasets
    from torchvision.transforms import ToTensor

    device = "cuda" if torch.cuda.is_available() else "cpu"
    print(f"Using device: {device}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using device: cpu




.. GENERATED FROM PYTHON SOURCE LINES 28-32

The ``torchvision.datasets`` module contains a number of convenient pre-prepared
datasets. In this tutorial we'll use the relatively simple FashionMNIST dataset. Each
image is an item of clothing, the objective is to classify the type of clothing in
the image (e.g. "Bag", "Sneaker" etc.).

.. GENERATED FROM PYTHON SOURCE LINES 32-46

.. code-block:: Python


    training_data = datasets.FashionMNIST(
        root="data",
        train=True,
        download=True,
        transform=ToTensor(),
    )
    test_data = datasets.FashionMNIST(
        root="data",
        train=False,
        download=True,
        transform=ToTensor(),
    )








.. GENERATED FROM PYTHON SOURCE LINES 47-53

We will create two tensordicts, one each for the training and test data. We create
memory-mapped tensors to hold the data. This will allow us to efficiently load
batches of transformed data from disk rather than repeatedly load and transform
individual images.

First we create the :class:`~tensordict.MemoryMappedTensor` containers.

.. GENERATED FROM PYTHON SOURCE LINES 53-77

.. code-block:: Python



    training_data_td = TensorDict(
        {
            "images": MemoryMappedTensor.empty(
                (len(training_data), *training_data[0][0].squeeze().shape),
                dtype=torch.float32,
            ),
            "targets": MemoryMappedTensor.empty((len(training_data),), dtype=torch.int64),
        },
        batch_size=[len(training_data)],
        device=device,
    )
    test_data_td = TensorDict(
        {
            "images": MemoryMappedTensor.empty(
                (len(test_data), *test_data[0][0].squeeze().shape), dtype=torch.float32
            ),
            "targets": MemoryMappedTensor.empty((len(test_data),), dtype=torch.int64),
        },
        batch_size=[len(test_data)],
        device=device,
    )








.. GENERATED FROM PYTHON SOURCE LINES 78-81

Then we can iterate over the data to populate the memory-mapped tensors. This takes a
bit of time, but performing the transforms up-front will save repeated effort during
training later.

.. GENERATED FROM PYTHON SOURCE LINES 81-88

.. code-block:: Python


    for i, (img, label) in enumerate(training_data):
        training_data_td[i] = TensorDict({"images": img, "targets": label}, [])

    for i, (img, label) in enumerate(test_data):
        test_data_td[i] = TensorDict({"images": img, "targets": label}, [])








.. GENERATED FROM PYTHON SOURCE LINES 89-99

DataLoaders
----------------

We'll create DataLoaders from the ``torchvision``-provided Datasets, as well as from
our memory-mapped TensorDicts.

Since ``TensorDict`` implements ``__len__`` and ``__getitem__`` (and also
``__getitems__``) we can use it like a map-style Dataset and create a ``DataLoader``
directly from it. Note that because ``TensorDict`` can already handle batched indices,
there is no need for collation, so we pass the identity function as ``collate_fn``.

.. GENERATED FROM PYTHON SOURCE LINES 99-112

.. code-block:: Python


    batch_size = 64

    train_dataloader = DataLoader(training_data, batch_size=batch_size)  # noqa: TOR401
    test_dataloader = DataLoader(test_data, batch_size=batch_size)  # noqa: TOR401

    train_dataloader_td = DataLoader(  # noqa: TOR401
        training_data_td, batch_size=batch_size, collate_fn=lambda x: x
    )
    test_dataloader_td = DataLoader(  # noqa: TOR401
        test_data_td, batch_size=batch_size, collate_fn=lambda x: x
    )








.. GENERATED FROM PYTHON SOURCE LINES 113-119

Model
-------

We use the same model from the
`Quickstart Tutorial <https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html>`__.


.. GENERATED FROM PYTHON SOURCE LINES 119-143

.. code-block:: Python



    class Net(nn.Module):
        def __init__(self):
            super().__init__()
            self.flatten = nn.Flatten()
            self.linear_relu_stack = nn.Sequential(
                nn.Linear(28 * 28, 512),
                nn.ReLU(),
                nn.Linear(512, 512),
                nn.ReLU(),
                nn.Linear(512, 10),
            )

        def forward(self, x):
            x = self.flatten(x)
            logits = self.linear_relu_stack(x)
            return logits


    model = Net().to(device)
    model_td = Net().to(device)
    model, model_td





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (Net(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (linear_relu_stack): Sequential(
        (0): Linear(in_features=784, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=10, bias=True)
      )
    ), Net(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (linear_relu_stack): Sequential(
        (0): Linear(in_features=784, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=10, bias=True)
      )
    ))



.. GENERATED FROM PYTHON SOURCE LINES 144-150

Optimizing the parameters
---------------------------------

We'll optimise the parameters of the model using stochastic gradient descent and
cross-entropy loss.


.. GENERATED FROM PYTHON SOURCE LINES 150-175

.. code-block:: Python


    loss_fn = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)
    optimizer_td = torch.optim.SGD(model_td.parameters(), lr=1e-3)


    def train(dataloader, model, loss_fn, optimizer):
        size = len(dataloader.dataset)
        model.train()

        for batch, (X, y) in enumerate(dataloader):
            X, y = X.to(device), y.to(device)

            pred = model(X)
            loss = loss_fn(pred, y)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            if batch % 100 == 0:
                loss, current = loss.item(), batch * len(X)
                print(f"loss: {loss:>7f} [{current:>5d}/{size:>5d}]")









.. GENERATED FROM PYTHON SOURCE LINES 176-179

The training loop for our ``TensorDict``-based DataLoader is very similar, we just
adjust how we unpack the data to the more explicit key-based retrieval offered by
``TensorDict``. The ``.contiguous()`` method loads the data stored in the memmap tensor.

.. GENERATED FROM PYTHON SOURCE LINES 179-265

.. code-block:: Python



    def train_td(dataloader, model, loss_fn, optimizer):
        size = len(dataloader.dataset)
        model.train()

        for batch, data in enumerate(dataloader):
            X, y = data["images"].contiguous(), data["targets"].contiguous()

            pred = model(X)
            loss = loss_fn(pred, y)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            if batch % 100 == 0:
                loss, current = loss.item(), batch * len(X)
                print(f"loss: {loss:>7f} [{current:>5d}/{size:>5d}]")


    def test(dataloader, model, loss_fn):
        size = len(dataloader.dataset)
        num_batches = len(dataloader)
        model.eval()
        test_loss, correct = 0, 0
        with torch.no_grad():
            for X, y in dataloader:
                X, y = X.to(device), y.to(device)

                pred = model(X)

                test_loss += loss_fn(pred, y).item()
                correct += (pred.argmax(1) == y).type(torch.float).sum().item()

        test_loss /= num_batches
        correct /= size

        print(
            f"Test Error: \n Accuracy: {(100 * correct):>0.1f}%, Avg loss: {test_loss:>8f} \n"
        )


    def test_td(dataloader, model, loss_fn):
        size = len(dataloader.dataset)
        num_batches = len(dataloader)
        model.eval()
        test_loss, correct = 0, 0
        with torch.no_grad():
            for batch in dataloader:
                X, y = batch["images"].contiguous(), batch["targets"].contiguous()

                pred = model(X)

                test_loss += loss_fn(pred, y).item()
                correct += (pred.argmax(1) == y).type(torch.float).sum().item()

        test_loss /= num_batches
        correct /= size

        print(
            f"Test Error: \n Accuracy: {(100 * correct):>0.1f}%, Avg loss: {test_loss:>8f} \n"
        )


    for d in train_dataloader_td:
        print(d)
        break

    import time

    t0 = time.time()
    epochs = 5
    for t in range(epochs):
        print(f"Epoch {t + 1}\n-------------------------")
        train_td(train_dataloader_td, model_td, loss_fn, optimizer_td)
        test_td(test_dataloader_td, model_td, loss_fn)
    print(f"TensorDict training done! time: {time.time() - t0: 4.4f} s")

    t0 = time.time()
    epochs = 5
    for t in range(epochs):
        print(f"Epoch {t + 1}\n-------------------------")
        train(train_dataloader, model, loss_fn, optimizer)
        test(test_dataloader, model, loss_fn)
    print(f"Training done! time: {time.time() - t0: 4.4f} s")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    TensorDict(
        fields={
            images: Tensor(shape=torch.Size([64, 28, 28]), device=cpu, dtype=torch.float32, is_shared=False),
            targets: Tensor(shape=torch.Size([64]), device=cpu, dtype=torch.int64, is_shared=False)},
        batch_size=torch.Size([64]),
        device=cpu,
        is_shared=False)
    Epoch 1
    -------------------------
    loss: 2.307479 [    0/60000]
    loss: 2.294110 [ 6400/60000]
    loss: 2.271370 [12800/60000]
    loss: 2.261102 [19200/60000]
    loss: 2.254437 [25600/60000]
    loss: 2.226951 [32000/60000]
    loss: 2.227666 [38400/60000]
    loss: 2.201736 [44800/60000]
    loss: 2.196285 [51200/60000]
    loss: 2.163273 [57600/60000]
    Test Error: 
     Accuracy: 53.0%, Avg loss: 2.160516 

    Epoch 2
    -------------------------
    loss: 2.172751 [    0/60000]
    loss: 2.161613 [ 6400/60000]
    loss: 2.101415 [12800/60000]
    loss: 2.110776 [19200/60000]
    loss: 2.068412 [25600/60000]
    loss: 2.016544 [32000/60000]
    loss: 2.034977 [38400/60000]
    loss: 1.965396 [44800/60000]
    loss: 1.957559 [51200/60000]
    loss: 1.887967 [57600/60000]
    Test Error: 
     Accuracy: 60.7%, Avg loss: 1.889887 

    Epoch 3
    -------------------------
    loss: 1.925453 [    0/60000]
    loss: 1.894723 [ 6400/60000]
    loss: 1.775522 [12800/60000]
    loss: 1.805741 [19200/60000]
    loss: 1.696540 [25600/60000]
    loss: 1.664063 [32000/60000]
    loss: 1.673627 [38400/60000]
    loss: 1.587274 [44800/60000]
    loss: 1.597553 [51200/60000]
    loss: 1.489899 [57600/60000]
    Test Error: 
     Accuracy: 61.0%, Avg loss: 1.516413 

    Epoch 4
    -------------------------
    loss: 1.586639 [    0/60000]
    loss: 1.552489 [ 6400/60000]
    loss: 1.403908 [12800/60000]
    loss: 1.464593 [19200/60000]
    loss: 1.340598 [25600/60000]
    loss: 1.350941 [32000/60000]
    loss: 1.355851 [38400/60000]
    loss: 1.294949 [44800/60000]
    loss: 1.317204 [51200/60000]
    loss: 1.210820 [57600/60000]
    Test Error: 
     Accuracy: 63.4%, Avg loss: 1.247838 

    Epoch 5
    -------------------------
    loss: 1.326151 [    0/60000]
    loss: 1.309450 [ 6400/60000]
    loss: 1.145926 [12800/60000]
    loss: 1.243031 [19200/60000]
    loss: 1.111733 [25600/60000]
    loss: 1.147954 [32000/60000]
    loss: 1.162564 [38400/60000]
    loss: 1.114989 [44800/60000]
    loss: 1.143033 [51200/60000]
    loss: 1.048318 [57600/60000]
    Test Error: 
     Accuracy: 64.7%, Avg loss: 1.081789 

    TensorDict training done! time:  8.6417 s
    Epoch 1
    -------------------------
    loss: 2.308556 [    0/60000]
    loss: 2.295271 [ 6400/60000]
    loss: 2.276348 [12800/60000]
    loss: 2.263630 [19200/60000]
    loss: 2.251762 [25600/60000]
    loss: 2.218332 [32000/60000]
    loss: 2.238591 [38400/60000]
    loss: 2.202918 [44800/60000]
    loss: 2.196582 [51200/60000]
    loss: 2.157949 [57600/60000]
    Test Error: 
     Accuracy: 32.8%, Avg loss: 2.154293 

    Epoch 2
    -------------------------
    loss: 2.168497 [    0/60000]
    loss: 2.153964 [ 6400/60000]
    loss: 2.099466 [12800/60000]
    loss: 2.111539 [19200/60000]
    loss: 2.061492 [25600/60000]
    loss: 2.001238 [32000/60000]
    loss: 2.045643 [38400/60000]
    loss: 1.962102 [44800/60000]
    loss: 1.967143 [51200/60000]
    loss: 1.894369 [57600/60000]
    Test Error: 
     Accuracy: 51.4%, Avg loss: 1.886144 

    Epoch 3
    -------------------------
    loss: 1.920922 [    0/60000]
    loss: 1.886462 [ 6400/60000]
    loss: 1.771756 [12800/60000]
    loss: 1.815865 [19200/60000]
    loss: 1.703090 [25600/60000]
    loss: 1.655594 [32000/60000]
    loss: 1.699313 [38400/60000]
    loss: 1.589389 [44800/60000]
    loss: 1.616145 [51200/60000]
    loss: 1.515840 [57600/60000]
    Test Error: 
     Accuracy: 60.6%, Avg loss: 1.522078 

    Epoch 4
    -------------------------
    loss: 1.590244 [    0/60000]
    loss: 1.552457 [ 6400/60000]
    loss: 1.402821 [12800/60000]
    loss: 1.476765 [19200/60000]
    loss: 1.353949 [25600/60000]
    loss: 1.349987 [32000/60000]
    loss: 1.383205 [38400/60000]
    loss: 1.296611 [44800/60000]
    loss: 1.328662 [51200/60000]
    loss: 1.235482 [57600/60000]
    Test Error: 
     Accuracy: 63.5%, Avg loss: 1.255542 

    Epoch 5
    -------------------------
    loss: 1.332310 [    0/60000]
    loss: 1.314240 [ 6400/60000]
    loss: 1.149302 [12800/60000]
    loss: 1.253123 [19200/60000]
    loss: 1.125751 [25600/60000]
    loss: 1.150722 [32000/60000]
    loss: 1.188829 [38400/60000]
    loss: 1.115945 [44800/60000]
    loss: 1.150821 [51200/60000]
    loss: 1.074085 [57600/60000]
    Test Error: 
     Accuracy: 64.9%, Avg loss: 1.091145 

    Training done! time:  34.0690 s





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 52.179 seconds)


.. _sphx_glr_download_tutorials_data_fashion.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: data_fashion.ipynb <data_fashion.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: data_fashion.py <data_fashion.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
